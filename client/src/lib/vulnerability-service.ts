import { apiRequest } from "./queryClient";

// Get all vulnerability scans, optionally filtered by server
export async function getVulnerabilityScans(serverId?: number) {
  const url = serverId ? `/api/vulnerability-scans?serverId=${serverId}` : "/api/vulnerability-scans";
  const response = await apiRequest("GET", url);
  return await response.json();
}

// Get a specific vulnerability scan
export async function getVulnerabilityScan(scanId: number) {
  const response = await apiRequest("GET", `/api/vulnerability-scans/${scanId}`);
  return await response.json();
}

// Get vulnerabilities for a specific scan
export async function getVulnerabilities(scanId: number) {
  const response = await apiRequest("GET", `/api/vulnerability-scans/${scanId}/vulnerabilities`);
  return await response.json();
}

// Start a new vulnerability scan for a server
export async function startVulnerabilityScan(serverId: number) {
  const response = await apiRequest("POST", `/api/servers/${serverId}/scan`);
  return await response.json();
}

// Get color class for vulnerability severity
export function getSeverityColor(severity: string): string {
  switch (severity?.toLowerCase()) {
    case 'critical':
      return 'bg-red-100 text-red-800';
    case 'high':
      return 'bg-orange-100 text-orange-800';
    case 'medium':
      return 'bg-yellow-100 text-yellow-800';
    case 'low':
      return 'bg-blue-100 text-blue-800';
    default:
      return 'bg-gray-100 text-gray-800';
  }
}

// Calculate total vulnerability count
export function calculateTotalVulnerabilities(scan: any): number {
  return (
    (scan.criticalCount || 0) +
    (scan.highCount || 0) +
    (scan.mediumCount || 0) +
    (scan.lowCount || 0)
  );
}

// Determine the overall security status for a server based on scan results
export function getSecurityStatus(scan: any): { status: string; color: string } {
  if (!scan) {
    return { status: 'Unknown', color: 'bg-gray-100 text-gray-800' };
  }

  if (scan.status !== 'success') {
    return { 
      status: scan.status === 'running' ? 'Scanning' : 'Scan Failed', 
      color: scan.status === 'running' ? 'bg-blue-100 text-blue-800' : 'bg-red-100 text-red-800' 
    };
  }

  const hasVulnerabilities = 
    (scan.criticalCount || 0) > 0 ||
    (scan.highCount || 0) > 0 ||
    (scan.mediumCount || 0) > 0 ||
    (scan.lowCount || 0) > 0;

  if (!hasVulnerabilities) {
    return { status: 'Secure', color: 'bg-green-100 text-green-800' };
  }

  if ((scan.criticalCount || 0) > 0 || (scan.highCount || 0) > 0) {
    return { status: 'Critical', color: 'bg-red-100 text-red-800' };
  }

  if ((scan.mediumCount || 0) > 0) {
    return { status: 'Vulnerable', color: 'bg-yellow-100 text-yellow-800' };
  }

  return { status: 'Low Risk', color: 'bg-blue-100 text-blue-800' };
}