import { useState, useEffect } from "react";
import { useQuery } from "@tanstack/react-query";
import { AlertCircle, AlertTriangle, ExternalLink, Shield, X } from "lucide-react";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogClose } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { format } from "date-fns";
import { Separator } from "@/components/ui/separator";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { ScrollArea } from "@/components/ui/scroll-area";

interface VulnerabilityScan {
  id: number;
  serverId: number;
  scanDate: string;
  status: string;
  criticalCount: number;
  highCount: number;
  mediumCount: number;
  lowCount: number;
  notes?: string;
}

interface Vulnerability {
  id: number;
  scanId: number;
  severity: string;
  packageName: string;
  title: string;
  cveId?: string;
  installedVersion?: string;
  fixedVersion?: string;
}

export interface VulnerabilityDetailsDialogProps {
  scanId: number;
  onClose: () => void;
  open?: boolean;
}

export default function VulnerabilityDetailsDialog({ scanId, onClose, open }: VulnerabilityDetailsDialogProps) {
  const [isOpen, setIsOpen] = useState(open ?? true);
  
  // Update isOpen when prop changes
  useEffect(() => {
    if (open !== undefined) {
      setIsOpen(open);
    }
  }, [open]);
  
  // Close the dialog internally and notify parent
  const handleClose = () => {
    setIsOpen(false);
    onClose();
  };

  const { data: vulnerabilities, isLoading } = useQuery<Vulnerability[]>({
    queryKey: [`/api/vulnerability-scans/${scanId}/vulnerabilities`],
    enabled: isOpen && !!scanId,
  });

  const { data: scanDetails } = useQuery<VulnerabilityScan>({
    queryKey: [`/api/vulnerability-scans/${scanId}`],
    enabled: isOpen && !!scanId,
  });

  const getSeverityColor = (severity: string) => {
    switch (severity?.toLowerCase()) {
      case 'critical':
        return 'bg-red-100 text-red-800';
      case 'high':
        return 'bg-orange-100 text-orange-800';
      case 'medium':
        return 'bg-yellow-100 text-yellow-800';
      case 'low':
        return 'bg-blue-100 text-blue-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity?.toLowerCase()) {
      case 'critical':
      case 'high':
        return <AlertTriangle className="h-4 w-4" />;
      case 'medium':
        return <AlertCircle className="h-4 w-4" />;
      case 'low':
        return <Shield className="h-4 w-4" />;
      default:
        return <Shield className="h-4 w-4" />;
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={(open) => {
      if (!open) handleClose();
    }}>
      <DialogContent className="max-w-4xl max-h-[80vh] overflow-hidden flex flex-col">
        <DialogHeader>
          <div className="flex justify-between items-center">
            <DialogTitle>Vulnerability Scan Details</DialogTitle>
            <DialogClose asChild>
              <Button variant="ghost" size="icon" onClick={handleClose}>
                <X className="h-4 w-4" />
              </Button>
            </DialogClose>
          </div>
          <DialogDescription>
            {scanDetails && (
              <div className="flex flex-col gap-1 mt-2">
                <div>Scan ID: {scanId}</div>
                <div>Date: {scanDetails.scanDate ? format(new Date(scanDetails.scanDate), 'PPpp') : 'N/A'}</div>
              </div>
            )}
          </DialogDescription>
        </DialogHeader>

        <Tabs defaultValue="vulnerabilities" className="flex-1 overflow-hidden flex flex-col">
          <TabsList className="w-full justify-start">
            <TabsTrigger value="vulnerabilities">Vulnerabilities</TabsTrigger>
            <TabsTrigger value="summary">Summary</TabsTrigger>
          </TabsList>

          <TabsContent value="vulnerabilities" className="flex-1 overflow-hidden">
            {isLoading ? (
              <div className="flex items-center justify-center h-64">
                <p>Loading vulnerabilities...</p>
              </div>
            ) : !vulnerabilities || vulnerabilities.length === 0 ? (
              <div className="flex flex-col items-center justify-center h-64 text-center">
                <Shield className="h-12 w-12 text-green-500 mb-4" />
                <h3 className="text-lg font-semibold mb-2">No Vulnerabilities Found</h3>
                <p className="text-gray-500 max-w-md">
                  Great news! This scan didn't find any vulnerabilities on the server.
                </p>
              </div>
            ) : (
              <ScrollArea className="h-[500px] w-full rounded-md border">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Severity</TableHead>
                      <TableHead>Package</TableHead>
                      <TableHead className="w-[300px]">Title</TableHead>
                      <TableHead>Installed Version</TableHead>
                      <TableHead>Fixed Version</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {vulnerabilities.map((vuln: Vulnerability) => (
                      <TableRow key={vuln.id} className="hover:bg-gray-50">
                        <TableCell>
                          <Badge className={getSeverityColor(vuln.severity)}>
                            <span className="flex items-center gap-1">
                              {getSeverityIcon(vuln.severity)}
                              {vuln.severity || 'Unknown'}
                            </span>
                          </Badge>
                        </TableCell>
                        <TableCell className="font-mono text-xs">{vuln.packageName}</TableCell>
                        <TableCell>
                          <div className="flex flex-col">
                            <span className="font-semibold truncate max-w-[300px]">{vuln.title}</span>
                            {vuln.cveId && (
                              <a
                                href={`https://nvd.nist.gov/vuln/detail/${vuln.cveId}`}
                                target="_blank"
                                rel="noopener noreferrer"
                                className="text-xs text-blue-500 hover:underline flex items-center mt-1"
                              >
                                {vuln.cveId}
                                <ExternalLink className="h-3 w-3 ml-1" />
                              </a>
                            )}
                          </div>
                        </TableCell>
                        <TableCell className="font-mono text-xs">{vuln.installedVersion || 'N/A'}</TableCell>
                        <TableCell className="font-mono text-xs">{vuln.fixedVersion || 'Not available'}</TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </ScrollArea>
            )}
          </TabsContent>

          <TabsContent value="summary" className="flex-1 overflow-auto p-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h3 className="text-lg font-semibold mb-3">Vulnerability Statistics</h3>
                <div className="grid grid-cols-2 gap-4">
                  <div className="p-4 border rounded-lg bg-gray-50">
                    <p className="text-sm text-gray-500">Critical</p>
                    <p className="text-2xl font-bold text-red-600">{scanDetails?.criticalCount || 0}</p>
                  </div>
                  <div className="p-4 border rounded-lg bg-gray-50">
                    <p className="text-sm text-gray-500">High</p>
                    <p className="text-2xl font-bold text-orange-600">{scanDetails?.highCount || 0}</p>
                  </div>
                  <div className="p-4 border rounded-lg bg-gray-50">
                    <p className="text-sm text-gray-500">Medium</p>
                    <p className="text-2xl font-bold text-yellow-600">{scanDetails?.mediumCount || 0}</p>
                  </div>
                  <div className="p-4 border rounded-lg bg-gray-50">
                    <p className="text-sm text-gray-500">Low</p>
                    <p className="text-2xl font-bold text-blue-600">{scanDetails?.lowCount || 0}</p>
                  </div>
                </div>
              </div>

              <div>
                <h3 className="text-lg font-semibold mb-3">Scan Information</h3>
                <div className="p-4 border rounded-lg bg-gray-50">
                  <div className="mb-2">
                    <span className="text-sm text-gray-500">Date:</span>
                    <span className="ml-2">
                      {scanDetails?.scanDate 
                        ? format(new Date(scanDetails.scanDate), 'MMM dd, yyyy HH:mm') 
                        : 'N/A'}
                    </span>
                  </div>
                  <div className="mb-2">
                    <span className="text-sm text-gray-500">Status:</span>
                    <span className="ml-2">
                      <Badge
                        className={
                          scanDetails?.status === 'running'
                            ? "bg-blue-100 text-blue-800"
                            : scanDetails?.status === 'success'
                            ? "bg-green-100 text-green-800"
                            : scanDetails?.status === 'failed'
                            ? "bg-red-100 text-red-800"
                            : "bg-gray-100 text-gray-800"
                        }
                      >
                        {scanDetails?.status 
                          ? scanDetails.status.charAt(0).toUpperCase() + scanDetails.status.slice(1) 
                          : 'Unknown'}
                      </Badge>
                    </span>
                  </div>
                  {scanDetails?.notes && (
                    <div>
                      <span className="text-sm text-gray-500">Notes:</span>
                      <p className="mt-1 text-sm whitespace-pre-wrap">{scanDetails.notes}</p>
                    </div>
                  )}
                </div>

                <div className="mt-4">
                  <h4 className="text-sm font-semibold mb-2">Remediation Steps</h4>
                  <div className="p-4 border rounded-lg bg-gray-50">
                    <ol className="list-decimal list-inside text-sm space-y-2">
                      <li>Update system packages using <code>apt update && apt upgrade</code></li>
                      <li>Install security patches as they become available</li>
                      <li>Consider implementing automated vulnerability scanning</li>
                      <li>Follow security advisories for your distribution</li>
                    </ol>
                  </div>
                </div>
              </div>
            </div>
          </TabsContent>
        </Tabs>
        
        <div className="flex justify-end pt-2">
          <Button variant="outline" onClick={handleClose}>Close</Button>
        </div>
      </DialogContent>
    </Dialog>
  );
}