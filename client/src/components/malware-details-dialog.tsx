import { useState, useEffect } from 'react';
import { 
  Dialog, 
  DialogContent, 
  DialogDescription, 
  DialogHeader, 
  DialogTitle
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Loader2, Shield, FileBadge, AlertTriangle, Calendar, Server } from "lucide-react";
import { 
  getMalwareScan, 
  getMalwareThreats, 
  getScanStatusText, 
  getScanStatusColor,
  getThreatCategoryInfo
} from '@/lib/malware-service';

interface MalwareDetailsDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  scanId: number | null;
}

export default function MalwareDetailsDialog({ 
  open, 
  onOpenChange, 
  scanId 
}: MalwareDetailsDialogProps) {
  const [scan, setScan] = useState<any>(null);
  const [threats, setThreats] = useState<any[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  useEffect(() => {
    if (open && scanId) {
      loadScanDetails(scanId);
    } else {
      // Clear previous data when dialog closes
      setScan(null);
      setThreats([]);
      setError('');
    }
  }, [open, scanId]);

  const loadScanDetails = async (id: number) => {
    setLoading(true);
    setError('');
    
    try {
      const scanData = await getMalwareScan(id);
      setScan(scanData);
      
      const threatsData = await getMalwareThreats(id);
      setThreats(threatsData);
    } catch (err: any) {
      console.error('Error loading malware scan details:', err);
      setError(err.message || 'Failed to load scan details');
    } finally {
      setLoading(false);
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleString();
  };

  if (!open) return null;

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-3xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2 text-xl">
            <Shield className="h-5 w-5 text-amber-500" /> 
            Malware Scan Details
          </DialogTitle>
          <DialogDescription>
            Review detected malware threats and scan information
          </DialogDescription>
        </DialogHeader>

        {loading ? (
          <div className="flex justify-center items-center py-12">
            <Loader2 className="h-8 w-8 animate-spin text-primary" />
          </div>
        ) : error ? (
          <div className="bg-red-50 border border-red-200 rounded-md p-4 my-4">
            <p className="text-red-600 flex items-center gap-2">
              <AlertTriangle className="h-5 w-5" />
              {error}
            </p>
          </div>
        ) : scan ? (
          <div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
              <div className="bg-card p-4 rounded-lg border">
                <h3 className="font-medium text-sm text-muted-foreground mb-2">Scan Information</h3>
                <div className="space-y-2 text-sm">
                  <div className="flex justify-between">
                    <span className="text-muted-foreground">Status:</span>
                    <span className={getScanStatusColor(scan.status)}>
                      {getScanStatusText(scan.status)}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-muted-foreground">Date:</span>
                    <span>{formatDate(scan.scanDate)}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-muted-foreground">Files Scanned:</span>
                    <span>{scan.filesScanned || 'N/A'}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-muted-foreground">Threats Found:</span>
                    <span className={threats.length > 0 ? "text-red-600 font-medium" : "text-green-600"}>
                      {threats.length}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-muted-foreground">Scan Duration:</span>
                    <span>{scan.scanDuration ? `${scan.scanDuration}s` : 'N/A'}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-muted-foreground">Scanned Directory:</span>
                    <span className="font-mono text-xs bg-muted px-1 py-0.5 rounded">
                      {scan.scanDirectory || '/'}
                    </span>
                  </div>
                </div>
              </div>

              {scan.errorMessage && (
                <div className="bg-red-50 border border-red-200 rounded-lg p-4 flex flex-col">
                  <h3 className="font-medium text-sm text-red-600 mb-2 flex items-center gap-1">
                    <AlertTriangle className="h-4 w-4" /> Error Information
                  </h3>
                  <p className="text-sm text-red-600 whitespace-pre-wrap flex-1 overflow-auto">
                    {scan.errorMessage}
                  </p>
                </div>
              )}
            </div>

            {threats.length > 0 ? (
              <div>
                <h3 className="font-medium mb-3 flex items-center gap-2">
                  <FileBadge className="h-5 w-5 text-red-500" />
                  Detected Threats
                </h3>
                <div className="border rounded-lg overflow-hidden">
                  <table className="w-full">
                    <thead className="bg-muted">
                      <tr>
                        <th className="px-4 py-2 text-left text-xs font-medium text-muted-foreground">Threat</th>
                        <th className="px-4 py-2 text-left text-xs font-medium text-muted-foreground">Category</th>
                        <th className="px-4 py-2 text-left text-xs font-medium text-muted-foreground">File Path</th>
                      </tr>
                    </thead>
                    <tbody className="divide-y">
                      {threats.map((threat, index) => {
                        const categoryInfo = getThreatCategoryInfo(threat.category);
                        return (
                          <tr key={index} className="hover:bg-muted/50">
                            <td className="px-4 py-3 text-sm font-medium">{threat.threatName}</td>
                            <td className="px-4 py-3">
                              <Badge variant="outline" className={categoryInfo.color}>
                                {categoryInfo.text}
                              </Badge>
                            </td>
                            <td className="px-4 py-3">
                              <div className="font-mono text-xs bg-muted px-2 py-1 rounded-sm truncate max-w-[300px]" title={threat.filePath}>
                                {threat.filePath}
                              </div>
                            </td>
                          </tr>
                        );
                      })}
                    </tbody>
                  </table>
                </div>
              </div>
            ) : scan.status === 'success' ? (
              <div className="bg-green-50 border border-green-200 rounded-md p-4 my-4">
                <p className="text-green-600 text-center font-medium">
                  No malware threats detected in this scan.
                </p>
              </div>
            ) : null}

            <div className="mt-6 flex justify-end">
              <Button variant="outline" onClick={() => onOpenChange(false)}>
                Close
              </Button>
            </div>
          </div>
        ) : (
          <div className="py-8 text-center text-muted-foreground">
            No scan data available
          </div>
        )}
      </DialogContent>
    </Dialog>
  );
}