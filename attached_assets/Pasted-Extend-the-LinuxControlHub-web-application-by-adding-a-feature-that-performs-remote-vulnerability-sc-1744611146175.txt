Extend the LinuxControlHub web application by adding a feature that performs remote vulnerability scanning on added Linux servers using Vuls.
The goal is to scan servers agentlessly via SSH and report back security vulnerabilities and CVEs affecting installed packages.

üîê Requirements:
Use SSH to connect to the remote server (already stored in the database).

Do not install anything on the target servers.

Scanning should be asynchronous, queued as a task in a job queue (e.g., Celery or a custom Golang worker).

‚öôÔ∏è Core Functionality:
When a user clicks ‚ÄúScan Server‚Äù on a Linux server card:

A scan task is enqueued with the selected server's ID.

The task dynamically generates a config.toml file for Vuls using the server‚Äôs stored SSH credentials.

The task triggers:

bash
Copy
Edit
vuls scan -config=/path/to/generated/config.toml
After the scan, generate a JSON report using:

bash
Copy
Edit
vuls report -format-json -o /tmp/vuls-report-<server_id>.json
Parse the JSON output to extract:

CVE IDs

Affected packages

Severity (LOW, MEDIUM, HIGH, CRITICAL)

Fix available (boolean)

CVE summary and CVSS score

Store the parsed results in a ScanResult table:

id, server_id, scan_time, severity_counts, raw_output_path, parsed_output, etc.

Display scan history per server in the UI:

Last scan date

CVE count by severity

Link to view full details or export report as JSON

üß∞ Additional Implementation Details:
Run the CVE database updates (via go-cve-dictionary and goval-dictionary) on a daily/weekly cron job. Example:

bash
Copy
Edit
go-cve-dictionary fetch nvd
goval-dictionary fetch-ubuntu 22.04
Ensure private keys used for SSH are encrypted at rest and decrypted only in memory at runtime.

Use non-root SSH users with sudo privileges for safety.

Log scan initiator, status, and timestamps for audit trail.

üíª Optional:
Add a way for users to schedule scans (e.g., daily, weekly)

Allow filtering and searching CVEs in the UI

Include a "Rescan Now" button on scan result pages

Use a lightweight HTML template to generate human-readable reports (optional)

üì¶ Deliverables:
Background worker logic to generate and execute scan jobs

Dynamic config.toml generator from DB models

JSON parser for Vuls output

Models & database schema for storing scan results

UI components: "Scan Server" button, scan history table, CVE viewer

API endpoints (optional) for triggering and retrieving scan results